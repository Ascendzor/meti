{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["sortItemTypes","a","b","id","App","useState","selectedItemTypes","setSelectedItemTypes","itemTypes","setItemTypes","items","setItems","selectedItemId","setSelectedItemId","selectedItemFull","setSelectedItemFull","selectedItem","find","i","console","log","useEffect","fetch","then","json","itemTypesResponse","Promise","all","map","itemType","toLowerCase","itemsResponse","selected","itemTypesWithItems","filter","code","sort","fullItem","includes","reduce","item","className","src","logo","alt","style","width","display","verticalAlign","type","checked","gridTemplateColumns","gridGap","key","onClick","color","height","name","icon","maxWidth","maxHeight","path","backgroundColor","borderRadius","textAlign","verticalAign","padding","damage","split","dps","randomAffixes","randomAffix","oneOf","something","dangerouslySetInnerHTML","__html","textHtml","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d062bef1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst classTypes = [\n  'Barbarian', 'Wizard', 'Crusader', 'Monk', 'DemonHunter', 'WitchDoctor', 'Necromancer'\n]\n\nconst sortItemTypes = (a, b) => a.id > b.id ? 1 : -1\n\nconst App = () => {\n  const [selectedItemTypes, setSelectedItemTypes] = useState(['Axe2H'])\n  const [itemTypes, setItemTypes] = useState([])\n  const [items, setItems] = useState([])\n  const [selectedItemId, setSelectedItemId] = useState('Unique_Axe_2H_001_x1')\n  const [selectedItemFull, setSelectedItemFull] = useState(null)\n\n  const selectedItem = items.find(i => i.id === selectedItemId)\n  console.log({selectedItemTypes})\n  console.log({selectedItem})\n  console.log({selectedItemFull})\n  \n  useEffect(() => {\n    (async () => {\n      const itemTypesResponse = await fetch('https://us.api.blizzard.com/d3/data/item-type?locale=en_US&access_token=US87Gk5HjmnwJz2TzFbq5AlVhS1ADB8c1l').then(a => a.json())\n      const itemTypesWithItems = await Promise.all(itemTypesResponse.map(async itemType => {\n        const itemsResponse = await fetch(`https://us.api.blizzard.com/d3/data/item-type/${itemType.id.toLowerCase()}?locale=en_US&access_token=US87Gk5HjmnwJz2TzFbq5AlVhS1ADB8c1l`)\n          .then(a => a.json())\n        return {...itemType,\n          selected: false,\n          items: itemsResponse\n        }\n      }))\n      setItemTypes(itemTypesWithItems.filter(itemType => {\n        console.log(itemType)\n        return itemType.items.code !== 'NOTFOUND'\n      }).sort(sortItemTypes))\n\n      const fullItem = await fetch('https://us.api.blizzard.com/d3/data/item/butchers-carver-Unique_Axe_2H_001_x1?locale=en_US&access_token=US87Gk5HjmnwJz2TzFbq5AlVhS1ADB8c1l')\n        .then(a => a.json())\n\n      setSelectedItemFull(fullItem)\n    })()\n  }, [])\n  console.log(itemTypes)\n\n  useEffect(() => {\n    setItems(\n      itemTypes.filter(itemType => {\n        return selectedItemTypes.includes(itemType.id)\n      }).reduce((items, itemType) => {\n        console.log(itemType)\n        return [...items,\n          ...itemType.items.reduce((items, item) => {\n            return [...items, item]\n          }, [])\n        ]\n      }, [])\n    )\n  }, [itemTypes, selectedItemTypes])\n  console.log({items})\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div style={{width: '33%', display: 'inline-block', verticalAlign: 'top'}}>\n        <div>\n          Item types \n          <input type='radio' checked={selectedItemTypes} />\n        </div>\n        {selectedItemTypes && <div style={{display: 'inline-grid', gridTemplateColumns: 'repeat(6, 1fr)', gridGap: 10}}>\n          {itemTypes.map(itemType => {\n            return <div \n              style={{\n                \n              }}\n              className={`box itemType ${selectedItemTypes.includes(itemType.id) ? 'selected' : 'notSelected'}`}\n              key={itemType.id}\n              onClick={() => {\n                console.log(itemTypes)\n                setSelectedItemTypes(selectedItemTypes.includes(itemType.id) ? selectedItemTypes.filter(a => a !== itemType.id) : [...selectedItemTypes, itemType.id])\n              }}\n            >\n              <div style={{color: 'white', height: 20}}>\n                {itemType.name}\n              </div>\n              <img src={`http://media.blizzard.com/d3/icons/items/large/${itemType.items[0].icon}.png`} style={{maxWidth: '100%', maxHeight: '100%'}} />\n            </div>\n          })}\n        </div>}\n      </div>\n      <div style={{width: '33%', display: 'inline-block', verticalAlign: 'top'}}>\n        <div>Items</div>\n        <div style={{display: 'inline-grid', gridTemplateColumns: 'repeat(6, 1fr)', gridGap: 10}}>\n          {items.map(item => {\n              return <div\n              className={`box itemType ${selectedItemId === item.id ? 'selected' : 'notSelected'}`}\n                key={item.id}\n                onClick={async () => {\n                  setSelectedItemId(item.id)\n                  \n                  const fullItem = await fetch(`https://us.api.blizzard.com/d3/data/${item.path}?locale=en_US&access_token=US87Gk5HjmnwJz2TzFbq5AlVhS1ADB8c1l`)\n                    .then(a => a.json())\n\n                  setSelectedItemFull(fullItem)\n                }}\n            >\n              <div style={{color: 'white', height: 20}}>\n                {item.name}\n              </div>\n              <img src={`http://media.blizzard.com/d3/icons/items/large/${item.icon}.png`} style={{maxWidth: '100%', maxHeight: '100%'}} />\n            </div>\n            })\n          }\n        </div>\n      </div>\n      <div style={{verticalAlign: 'top', width: '33%', display: 'inline-block'}}>\n        <div>Selected item</div>\n        {selectedItem && <div style={{backgroundColor: '#16161d', borderRadius: 10, color: 'white'}}>\n          <div style={{display: 'inline-block', width: '50%', verticalAlign: 'top'}}>\n            {selectedItemFull && <div>\n              <div>\n                <div style={{display: 'inline-block', width: '50%', textAlign: 'right', verticalAign: 'top'}}>\n                  <div style={{padding: 5}}>name</div>\n                  <div style={{padding: 5}}>damage</div>\n                  <div style={{padding: 5}}>dps</div>\n                </div>\n                <div style={{display: 'inline-block', width: '50%', textAlign: 'left', verticalAign: 'top'}}>\n                  <div style={{padding: 5}}>{selectedItemFull.name}</div>\n                  <div style={{padding: 5}}>{selectedItemFull.damage && selectedItemFull.damage.split(' ')[0]}</div>\n                  <div style={{padding: 5}}>{selectedItemFull.dps}</div>\n                </div>\n                <div style={{padding: 5}}>Attributes</div>\n                {selectedItemFull.randomAffixes && selectedItemFull.randomAffixes.map(randomAffix => {\n                  return <div>\n                    {randomAffix.oneOf.map(something => {\n                      return <div dangerouslySetInnerHTML={{__html: something.textHtml}} />\n                    })}\n                  </div>\n                  // return <div dangerouslySetInnerHTML={{__html: selectedItemFull.damageHtml}} />\n                  // <div style={{display: 'inline-block', width: '50%', textAlign: 'left', verticalAign: 'top'}}>\n\n                  // </div>\n                  // <div style={{display: 'inline-block', width: '50%', textAlign: 'left', verticalAign: 'top'}}>\n  \n                  // </div>\n                })}\n                \n                {/* <div dangerouslySetInnerHTML={{__html: selectedItemFull.damageHtml}} /> */}\n              </div>\n            </div>}\n          </div>\n          <div style={{display: 'inline-block', width: '50%', verticalAlign: 'top'}}>\n            <img src={`http://media.blizzard.com/d3/icons/items/large/${selectedItem.icon}.png`} style={{width: '50%', height: '50%'}} />\n          </div>\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}